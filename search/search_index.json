{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#technical-reference","title":"Technical Reference","text":""},{"location":"#outline","title":"Outline","text":"<ol> <li>About</li> <li>1a. Getting started</li> <li>Output abbreviations</li> <li>Project structure</li> <li>Setup</li> <li>Dependencies</li> <li>Fields</li> <li>Year</li> <li>States</li> <li>Counties</li> <li>Census API key</li> <li>Functions <ol> <li>Override <code>base</code> and <code>stats</code> function defaults </li> <li>Create custom half-standard deviation breaks </li> <li>Exception </li> <li>Move column or vector of columns to last position </li> <li>Summarize data</li> </ol> </li> <li>Variance replicate table download</li> <li>Download variance replicates from Census website</li> <li>Combine and format downloads</li> <li>Variance replicate table processing</li> <li>Compute racial minority count MOE</li> <li>Save results</li> <li>ACS estimates download</li> <li>Fields</li> <li>Download counts and universes from Census API 1. Exception</li> <li>Download percentages from Census API</li> <li>Format downloads 1. Exception 2. Exception 3. Exception</li> <li>ACS estimates calculations</li> <li>Percentages and percentage MOEs 1. Calculation 2. Result 3. Exception 4. Exception</li> <li>Percentile 1. Calculation 2. Result</li> <li>IPD score and classification 1. Calculation 2. Result</li> <li>Composite IPD score <ol> <li>Calculation</li> </ol> </li> <li>ACS estimates cleaning</li> <li>Summary tables</li> <li>Counts by indicator</li> <li>Breaks by indicator</li> <li>Summary by indicator</li> <li>County means by indicator</li> <li>Replacing NA with NoData if character and -99999 if numeric</li> <li>Export</li> <li>Append to TIGER/LINE file</li> <li>Export files</li> <li>Metadata table with sources</li> </ol>"},{"location":"#about","title":"1. About","text":"<p>DVRPC's IPD analysis identifies populations of interest under Title VI of the Civil Rights Act and the Executive Order on Environmental Justice (#12898) using 2016\u20132020 American Community Survey (ACS) five-year estimates from the U.S. Census Bureau. IPD analysis assists both DVRPC and outside organizations in equity work by identifying populations of interest, including youth, older adults, female, racial minority, ethnic minority, foreign-born, limited English proficiency, disabled, and low-income populations at the census tract level in DVRPC's nine-county region.</p> <p>There are many ways of identifying these populations of interest. This document discusses DVRPC's process, which is automated in an <code>R</code> script.</p>"},{"location":"#one_a","title":"1a. Getting started","text":"<p>For guidance on software prerequisites and how to run this script, see the README.md</p>"},{"location":"#one_b","title":"1b. Output abbreviations","text":"<p>Components of field names that you'll see in <code>outputs</code> and throughout the script.</p> Component Equivalent D Disabled EM Ethnic Minority F Female FB Foreign-Born LEP Limited English Proficiency LI Low-Income OA Older Adults RM Racial Minority Y Youth CntEst Count Estimate CntMOE Count MOE PctEst Percentage Estimate PctMOE Percentage MOE Pctile Percentile Score Score Class Classification <p></p> <p>Abbreviations of field names that you'll see in <code>outputs</code> not comprised of the above components.</p> Abbreviation Equivalent GEOID Census Tract Identifier STATEFP State FIPS Code COUNTYFP County FIPS Code NAME Census Tract FIPS Code IPD_Score Composite IPD Score U_TPopEst Total Population Estimate U_TPopMOE Total Population MOE U_Pop5Est Population 5+ Estimate U_Pop5MOE Population 5+ MOE U_PPovEst Poverty Status Population Estimate U_PPovMOE Poverty Status Population MOE U_PNICEst Non-Institutional Civilian Population Estimate U_PNICMOE Non-Institutional Civilian Population MOE"},{"location":"#one_c","title":"1c. Project structure","text":"<p>This script uses relative file paths based off the location of <code>ipd.Rproj</code>. As long as you download the entire repository, the script should have no trouble locating the correct subfolders. All of the subsequent years files are based on the same architecture. The project is structured as follows:</p> <pre><code>ipd\nipd.Rproj\nscript.R\ndocumentation\ndiscussion.pdf\ngetting_started.pdf\nscript_reference.pdf\nscript_reference.Rmd\nvariables.csv\noutputs\nbreaks_by_indicator.csv\ncounts_by_indicator.csv\nipd.csv\nipd.dbf\nipd.prj\nipd.shp\nipd.shx\nmean_by_county.csv\nsummary_by_indicator.csv\n</code></pre>"},{"location":"#setup","title":"2. Setup","text":""},{"location":"#two_a","title":"2a. Dependencies","text":"<p>The following packages are required to run this script. If you don't have the packages, you'll get the warning <code>Error in library (&lt;name of package&gt;) : there is no package called '&lt;name of package&gt;'</code>, in which case you'll need to install the package before proceeding.</p> <pre><code>library(plyr); library(here); library(sf); library(summarytools);\nlibrary(tidycensus); library(tidyverse); library(tigris); library(dplyr); library(descr);\n</code></pre>"},{"location":"#two_b","title":"2b. Fields","text":"<p>The base information we need for IPD analysis are universes, counts, and percentages for nine indicators at the census tract level. For each indicator, the table below shows the indicator name, its abbreviation used in the script, its universe, its count, and its percentage field if applicable. Find a list of histoic variables below:</p> Field year_2015 year_2016 year_2017 year_2018 year_2019 year_2020 year_2021 disabled_universe S1810_C01_001 S1810_C01_001 S1810_C01_001 S1810_C01_001 S1810_C01_001 S1810_C01_001 S1810_C01_001 disabled_count S1810_C02_001 S1810_C02_001 S1810_C02_001 S1810_C02_001 S1810_C02_001 S1810_C02_001 S1810_C02_001 disabled_percent S1810_C03_001 S1810_C03_001 S1810_C03_001 S1810_C03_001 S1810_C03_001 S1810_C03_001 S1810_C03_001 ethnic_minority_universe B03002_001 B03002_001 B03002_001 B03002_001 B03002_001 B03002_001 B03002_001 ethnic_minority_count B03002_012 B03002_012 B03002_012 B03002_012 B03002_012 B03002_012 B03002_012 ethnic_minority_percent NA NA NA NA NA NA NA female_universe S0101_C01_001 S0101_C01_001 S0101_C01_001 S0101_C01_001 S0101_C01_001 S0101_C01_001 S0101_C01_001 female_count S0101_C03_001 S0101_C03_001 S0101_C05_001 S0101_C05_001 S0101_C05_001 S0101_C05_001 S0101_C05_001 female_percent DP05_0003PE DP05_0003PE DP05_0003PE DP05_0003PE DP05_0003PE DP05_0003PE DP05_0003PE foreign_born_universe B05012_001 B05012_001 B05012_001 B05012_001 B05012_001 B05012_001 B05012_001 foreign_born_count B05012_003 B05012_003 B05012_003 B05012_003 B05012_003 B05012_003 B05012_003 foreign_born_percent NA NA NA NA NA NA NA limited_english_proficiency_universe S1601_C01_001 S1601_C01_001 S1601_C01_001 S1601_C01_001 S1601_C01_001 S1601_C01_001 S1601_C01_001 limited_english_proficiency_count S1601_C05_001 S1601_C05_001 S1601_C05_001 S1601_C05_001 S1601_C05_001 S1601_C05_001 S1601_C05_001 limited_english_proficiency_percent S1601_C06_001 S1601_C06_001 S1601_C06_001 S1601_C06_001 S1601_C06_001 S1601_C06_001 S1601_C06_001 low_income_universe S1701_C01_001 S1701_C01_001 S1701_C01_001 S1701_C01_001 S1701_C01_001 S1701_C01_001 S1701_C01_001 low_income_count S1701_C01_042 S1701_C01_042 S1701_C01_042 S1701_C01_042 S1701_C01_042 S1701_C01_042 S1701_C01_042 low_income_percent NA NA NA NA NA NA NA older_adults_universe S0101_C01_001 S0101_C01_001 S0101_C01_001 S0101_C01_001 S0101_C01_001 S0101_C01_001 S0101_C01_001 older_adults_count DP05_0025E DP05_0025E DP05_0025E S0101_C01_030 S0101_C01_030 S0101_C01_030 S0101_C01_030 older_adults_percent S0101_C02_028 S0101_C02_028 S0101_C02_030 S0101_C02_030 S0101_C02_030 S0101_C02_030 S0101_C02_030 racial_minority_universe B02001_001 B02001_001 B02001_001 B02001_001 B02001_001 B02001_001 B02001_001 racial_minority_count B02001_002 B02001_002 B02001_002 B02001_002 B02001_002 B02001_002 B02001_002 racial_minority_percent NA NA NA NA NA NA NA youth_universe B03002_001 B03002_001 B03002_001 B03002_001 B03002_001 B03002_001 <p>Some percentage fields are empty. This is okay: we will compute the percentages when they are not directly available from the ACS.</p> <p>Note that variable B02001_002 (\"Estimate; Total: - White alone\") is listed as the count for Racial Minority. This is a mathematical shortcut: otherwise, we would need to add several subfields to compute the same estimate. The desired count is B02001_001 (Universe) \\(-\\) B02001_002 (\"Estimate; Total: - White alone\"). The subtraction is computed after download in Section 5d.i., making a correct estimate and an incorrect MOE. The correct MOE for the count, as calculated in Section 4, will be appended later.</p> Indicator Abbreviation Universe Count Percentage Disabled D S1810_C01_001 S1810_C02_001 S1810_C03_001 Ethnic Minority EM B03002_001 B03002_012 N/A Female F S0101_C01_001 S0101_C05_001 DP05_0003PE Foreign-Born FB B05012_001 B05012_003 N/A Limited English Proficiency LEP S1601_C01_001 S1601_C05_001 S1601_C06_001 Low-Income LI S1701_C01_001 S1701_C01_042 N/A Older Adults OA S0101_C01_001 S0101_C01_030 S0101_C02_030 Racial Minority RM B02001_001 B02001_002 N/A Youth Y B03002_001 B09001_001 N/A <p></p> <p>While it's quicker to embed the names of the desired columns into the code, fields are explicitly spelled out in this script. This is a purposeful design choice. The user should check that the field names point to the correct API request with every IPD update. The best way to check the field names is to visit Census Developers and select the corresponding API. For a history of the ACS variables used in IPD 2015, 2016, and 2017, see <code>variables.csv</code> in the <code>documentation</code> folder or in the table above.</p> <p></p>"},{"location":"#two_c","title":"2c. Year","text":"<p>The data download year.</p> <pre><code>ipd_year &lt;- 2017\n</code></pre> <p></p>"},{"location":"#two_d","title":"2d. States","text":"<p>The data download state or states. Use the two-character text abbreviation. </p> <pre><code>ipd_states &lt;- c(\"NJ\", \"PA\")\n</code></pre> <p></p>"},{"location":"#two_e","title":"2e. Counties","text":"<p>The counties in your study area. Use five-digit characters concatenating the two-digit state and three-digit county GEOID's. </p> <pre><code>ipd_counties &lt;- c(\"34005\", \"34007\", \"34015\", \"34021\",\n\"42017\", \"42029\", \"42045\", \"42091\", \"42101\")\n</code></pre> <p></p>"},{"location":"#two_f","title":"2f. Census API Key","text":"<p>Placeholder if you have never installed an API key before. If this is your first time accessing the Census API using <code>R</code>, see README.md </p> <pre><code># Census API Key\ncensus_api_key(\"YOUR API KEY GOES HERE\", install = TRUE)\n</code></pre>"},{"location":"#the-typical-user-should-not-have-to-edit-anything-below-this-point","title":"THE TYPICAL USER SHOULD NOT HAVE TO EDIT ANYTHING BELOW THIS POINT.","text":""},{"location":"#two_g","title":"2g. Functions","text":"<p>Load custom functions.</p>"},{"location":"#two_g_i","title":"2g.i. Override <code>base</code> and <code>stats</code> function defaults","text":"<p>A time-saver so that it's not required to call <code>na.rm = TRUE</code> every time common functions are called. </p> <pre><code>min &lt;- function(i, ..., na.rm = TRUE) {\nbase::min(i, ..., na.rm = na.rm)\n}\nmean &lt;- function(i, ..., na.rm = TRUE) {\nbase::mean(i, ..., na.rm = na.rm)\n}\nsd &lt;- function(i, ..., na.rm = TRUE) {\nstats::sd(i, ..., na.rm = na.rm)\n}\nmax &lt;- function(i, ..., na.rm = TRUE) {\nbase::max(i, ..., na.rm = na.rm)\n}\n</code></pre>"},{"location":"#two_g_ii","title":"2g.ii. Create custom half-standard deviation breaks","text":"<p>For a given vector of numbers <code>x</code> and a number of bins <code>i</code>, <code>st_dev_breaks</code> computes the bin breaks starting at <code>$-0.5 \\cdot st dev$</code> and <code>$0.5 \\cdot st dev$</code>. For the purposes of IPD analysis, <code>i = 5</code>, and <code>st_dev_breaks</code> calculates the minimum, <code>$-1.5 \\cdot st dev$</code>, <code>$-0.5 \\cdot st dev$</code>, <code>$0.5 \\cdot st dev$</code>, <code>$1.5 \\cdot st dev$</code>, and maximum values. These values are later used to slice the vector into five bins.</p>"},{"location":"#two_g_iii","title":"2g.iii. Exception","text":"<p>All minima are coerced to equal zero. If the first bin break (<code>$-1.5 \\cdot st dev$</code>) is negative, as happens when the data has a large spread and therefore a large standard deviation, then this bin break is coerced to equal 0.1. In these cases, only estimates of 0 percent will be placed in the bottom bin. </p> <pre><code>st_dev_breaks &lt;- function(x, i, na.rm = TRUE){\nhalf_st_dev_count &lt;- c(-1 * rev(seq(1, i, by = 2)),\nseq(1, i, by = 2))\nif((i %% 2) == 1) {\nhalf_st_dev_breaks &lt;- sapply(half_st_dev_count,\nfunction(i) (0.5 * i * sd(x)) + mean(x))\nhalf_st_dev_breaks[[1]] &lt;- 0\nhalf_st_dev_breaks[[2]] &lt;- ifelse(half_st_dev_breaks[[2]] &lt; 0,\n0.1,\nhalf_st_dev_breaks[[2]])\nhalf_st_dev_breaks[[i + 1]] &lt;- ifelse(max(x) &gt; half_st_dev_breaks[[i + 1]],\nmax(x), half_st_dev_breaks[[i + 1]])\n} else {\nhalf_st_dev_breaks &lt;- NA\n}\nreturn(half_st_dev_breaks)\n}\n</code></pre>"},{"location":"#two_g_iv","title":"2g.iv. Move column or vector of columns to last position","text":"<p>The requested schema for IPD data export renames and places all relevant universes in the final columns of the dataset. <code>move_last</code> moves a column or vector of column names to the last position(s) in a data frame. Further reordering is done in the final web application. </p> <pre><code>move_last &lt;- function(df, last_col) {\nmatch(c(setdiff(names(df), last_col), last_col), names(df))\n}\n</code></pre>"},{"location":"#two_g_v","title":"2g.v. Summarize data","text":"<p><code>description</code> tailors the exports from <code>summarytools::descr</code> to create summary tables with the requested fields. <code>$0.5 \\cdot st dev$</code> is returned after <code>$stdev$</code>. </p> <pre><code>description &lt;- function(i) {\ndes &lt;- as.numeric(summarytools::descr(i, na.rm = TRUE,\nstats = c(\"min\", \"med\", \"mean\", \"sd\", \"max\")))\ndes &lt;- c(des[1:4], des[4] / 2, des[5])\nreturn(des)\n}\n</code></pre>"},{"location":"#variance_replicate_table_download","title":"3. Variance replicate table download","text":"<p>The racial minority indicator is created by summing up several subgroups in ACS Table <code>B03002</code>. This means that the MOE for the count has to be computed. While the ACS has issued guidance on computing the MOE by aggregating subgroups, using the approximation formula can artificially deflate the derived MOE. Variance replicate tables are used instead to account for covariance and compute a more accurate MOE. The MOE computed from variance replicates is substituted in for the racial minority count MOE in Section 5d.ii.</p> <p>See the Census Bureau's Variance Replicate Tables Documentation for additional guidance on working with variance replicates.</p>"},{"location":"#three_a","title":"3a. Download variance replicates from Census website","text":"<p>Download, unzip, and read variance replicate tables for Table <code>B02001</code>. Results are combined into a single table called <code>var_rep</code>. </p> <pre><code>ipd_states_numeric &lt;- fips_codes %&gt;%\nfilter(state %in% ipd_states) %&gt;%\nselect(state_code) %&gt;% distinct(.) %&gt;% pull(.)\nvar_rep &lt;- NULL\nfor (i in 1:length(ipd_states)){\nurl &lt;- paste0(\"https://www2.census.gov/programs-surveys/acs/replicate_estimates/\",\nipd_year,\n\"/data/5-year/140/B02001_\",\nipd_states_numeric[i],\n\".csv.zip\")\ntemp &lt;- tempfile()\ndownload.file(url, temp)\nvar_rep_i &lt;- read.csv(unzip(temp))\nvar_rep &lt;- dplyr::bind_rows(var_rep, var_rep_i)\n}\n</code></pre>"},{"location":"#three_b","title":"3b. Combine and format downloads","text":"<p>Subset <code>var_rep</code> for the study area defined in <code>ipd_counties</code> and extract the necessary subgroups. </p> <pre><code>var_rep &lt;- var_rep %&gt;%\nmutate_at(vars(GEOID), ~(str_sub(., 8, 18))) %&gt;%\nfilter(str_sub(GEOID, 1, 5) %in% ipd_counties) %&gt;%\nselect(-TBLID, -NAME, -ORDER, -MOE, -CME, -SE) %&gt;%\nfilter(TITLE %in% c(\"Black or African American alone\",\n\"American Indian and Alaska Native alone\",\n\"Asian alone\",\n\"Native Hawaiian and Other Pacific Islander alone\",\n\"Some other race alone\",\n\"Two or more races:\"))\n</code></pre>"},{"location":"#variance_replicate_table_processing","title":"4. Variance replicate table processing","text":""},{"location":"#four_a","title":"4a. Compute racial minority count MOE","text":"<p>Add up the racial minority counts into a single count per census tract for the estimate and 80 variance replicates. Separate the resulting data frame into estimates and variance replicates. </p> <pre><code>num &lt;- var_rep %&gt;% group_by(GEOID) %&gt;%\nsummarize_if(is.numeric, ~ sum(.)) %&gt;%\nselect(-GEOID)\nestim &lt;- num %&gt;% select(ESTIMATE)\nindividual_replicate &lt;- num %&gt;% select(-ESTIMATE)\n</code></pre> <p>Compute the variance replicate for the count. GEOIDs are stored as <code>id</code> to be re-appended to the MOEs after they are calculated. </p> <pre><code>id &lt;- var_rep %&gt;% select(GEOID) %&gt;% distinct(.) %&gt;% pull(.)\nsqdiff_fun &lt;- function(v, e) (v - e) ^ 2\nsqdiff &lt;- mapply(sqdiff_fun, individual_replicate, estim) sum_sqdiff &lt;- sapply(sqdiff, sum) variance &lt;- 0.05 * sum_sqdiff\nmoe &lt;- round(sqrt(variance) * 1.645, 0)\n</code></pre>"},{"location":"#four_b","title":"4b. Save results","text":"<p>Save the racial minority MOE. </p> <pre><code>rm_moe &lt;- cbind(id, moe) %&gt;%\nas_tibble(.) %&gt;%\nrename(GEOID20 = id, RM_CntMOE = moe) %&gt;%\nmutate_at(vars(RM_CntMOE), as.numeric)\n</code></pre>"},{"location":"#acs_estimates_download","title":"5. ACS estimates download","text":""},{"location":"#five_a","title":"5a. Fields","text":"<p>Fields for downloads from the ACS API were discussed in Section 2b.</p>"},{"location":"#five_b","title":"5b. Download counts and universes from Census API","text":"<p>Download counts and percentages for each of IPD's nine indicators. Note that the download is for all census tracts in <code>ipd_states</code>.</p> <p>Input data for IPD comes from ACS Subject Tables, Detailed Tables, and Data Profiles. While one can request all the fields for Subject Tables in one batch, mixing requests for two or more different types of tables will result in failure. For this reason, the counts and universe fields supplied by the user in Section 2b are evaluated for their contents and split into three batches: <code>s_counts</code> for Subject Tables, <code>d_counts</code> for Detailed Tables, and <code>dp_counts</code> for Data Profiles.</p> <p>The chunk below zips the user-defined calls from the API with the output abbreviations into a data frame called <code>counts_calls</code> and separates the calls into three batches. </p> <pre><code>counts &lt;- c(disabled_count, disabled_universe,\nethnic_minority_count, ethnic_minority_universe,\nfemale_count, female_universe,\nforeign_born_count, foreign_born_universe,\nlimited_english_proficiency_count, limited_english_proficiency_universe,\nlow_income_count, low_income_universe,\nolder_adults_count, older_adults_universe,\nracial_minority_count, racial_minority_universe,\nyouth_count, youth_universe)\ncounts_ids &lt;- c(\"D_C\", \"D_U\", \"EM_C\", \"EM_U\",\n\"F_C\", \"F_U\",\n\"FB_C\", \"FB_U\",\n\"LEP_C\", \"LEP_U\", \"LI_C\", \"LI_U\",\n\"OA_C\", \"OA_U\", \"RM_C\", \"RM_U\", \"Y_C\", \"Y_U\")\n# Zip count API variables and their appropriate abbreviations together\ncounts_calls &lt;- tibble(id = counts_ids, api = counts) %&gt;%\ndrop_na(.)\n# Separate into different types of API requests\ns_calls &lt;- counts_calls %&gt;%\nfilter(str_sub(api, 1, 1) == \"S\")  # Summary Tables\nd_calls &lt;- counts_calls %&gt;%\nfilter(str_sub(api, 1, 1) == \"B\")  # Detailed Tables\ndp_calls &lt;- counts_calls %&gt;%\nfilter(str_sub(api, 1, 1) == \"D\")  # Data Profile\n</code></pre> <p>API calls are made separately for ACS Subject Tables, Detailed Tables, and Data Profiles and appended to <code>dl_counts</code>. Sometimes there are no requests for an ACS table type; in these situations, the script bypasses a download attempt. Then, information from <code>counts_calls</code> is used to rename the downloads to the appropriate abbreviation. Please note that ACS surveys 2019 and before make use of the GEOID10 variable. </p> <pre><code>dl_counts &lt;- NULL\nif(length(s_calls$id &gt; 0)){\ns_counts &lt;- get_acs(geography = \"tract\",\nstate = ipd_states,\noutput = \"wide\",\nyear = ipd_year,\nvariables = s_calls$api) %&gt;%\nselect(-NAME)\ndl_counts &lt;- bind_cols(dl_counts, s_counts)\n}\nif(length(d_calls$id &gt; 0)){\nd_counts &lt;- get_acs(geography = \"tract\",\nstate = ipd_states,\noutput = \"wide\",\nyear = ipd_year,\nvariables = d_calls$api) %&gt;%\nselect(-NAME)\ndl_counts &lt;- left_join(dl_counts, d_counts)\n}\nif(length(dp_calls$id &gt; 0)){\ndp_counts &lt;- get_acs(geography = \"tract\",\nstate = ipd_states,\noutput = \"wide\",\nyear = ipd_year,\nvariables = dp_calls$api) %&gt;%\nselect(-NAME)\ndl_counts &lt;- left_join(dl_counts, dp_counts)\n}\ndl_counts &lt;- dl_counts %&gt;%\nrename(GEOID20 = GEOID)\n</code></pre>"},{"location":"#five_b_i","title":"5b.i. Exception","text":"<p>The API does not allow redundant downloads, so universes for Older Adults and Youth are duplicated after download. <code>duplicate_cols</code> identifies duplicate API calls, and <code>combined_rows</code> serves as a crosswalk to duplicate and rename fields. </p> <pre><code>duplicate_cols &lt;- counts_calls %&gt;% group_by(api) %&gt;% filter(n()&gt;1) %&gt;%\nsummarize(orig = id[1],\nduplicator = id[2])\ne_paste &lt;- function(i) paste0(i, \"E\")\nm_paste &lt;- function(i) paste0(i, \"M\")\ne_rows &lt;- apply(duplicate_cols, 2, e_paste)\nm_rows &lt;- apply(duplicate_cols, 2, m_paste)\ncombined_rows &lt;- as_tibble(rbind(e_rows, m_rows)) %&gt;%\nmutate_all(as.character)\nfor(i in 1:length(combined_rows$api)){\ndl_counts[combined_rows$duplicator[i]] &lt;- dl_counts[combined_rows$orig[i]]\n}\n</code></pre>"},{"location":"#five_c","title":"5c. Download percentages from Census API","text":"<p>Download percentage tables that are available for four of IPD's nine indicators. We will compute percentages and their associated MOEs for the rest of the dataset later. The procedure is identical to that described in Section 5b. </p> <pre><code>percs &lt;- c(disabled_percent,\nethnic_minority_percent,\nfemale_percent,\nforeign_born_percent,\nlimited_english_proficiency_percent,\nlow_income_percent,\nolder_adults_percent,\nracial_minority_percent,\nyouth_percent)\npercs_ids &lt;- c(\"D_P\", \"EM_P\", \"F_P\", \"FB_P\", \"LEP_P\",\n\"LI_P\", \"OA_P\", \"RM_P\", \"Y_P\")\npercs_calls &lt;- tibble(id = percs_ids, api = percs) %&gt;%\ndrop_na(.)\ns_calls &lt;- percs_calls %&gt;%\nfilter(str_sub(api, 1, 1) == \"S\")\nd_calls &lt;- percs_calls %&gt;%\nfilter(str_sub(api, 1, 1) == \"B\")\ndp_calls &lt;- percs_calls %&gt;%\nfilter(str_sub(api, 1, 1) == \"D\")\ndl_percs &lt;- NULL\nif(length(s_calls$id &gt; 0)){\ns_percs &lt;- get_acs(geography = \"tract\",\nstate = ipd_states,\noutput = \"wide\",\nyear = ipd_year,\nvariables = s_calls$api) %&gt;%\nselect(-NAME)\ndl_percs &lt;- bind_cols(dl_percs, s_percs)\n}\nif(length(d_calls$id &gt; 0)){\nd_percs &lt;- get_acs(geography = \"tract\",\nstate = ipd_states,\noutput = \"wide\",\nyear = ipd_year,\nvariables = d_calls$api) %&gt;%\nselect(-NAME)\ndl_percs &lt;- left_join(dl_percs, d_percs)\n}\nif(length(dp_calls$id &gt; 0)){\ndp_percs &lt;- get_acs(geography = \"tract\",\nstate = ipd_states,\noutput = \"wide\",\nyear = ipd_year,\nvariables = dp_calls$api) %&gt;%\nselect(-NAME)\ndl_percs &lt;- left_join(dl_percs, dp_percs)\n}\ndl_percs &lt;- dl_percs %&gt;%\nrename(GEOID20 = GEOID)\n# For DP downloads, make sure percs_calls and dl_percs match\npercs_calls$api &lt;- str_replace(percs_calls$api, \"PE\", \"\")\nnames(dl_percs) &lt;- str_replace(names(dl_percs), \"PE\", \"E\")\nnames(dl_percs) &lt;- str_replace(names(dl_percs), \"PM\", \"M\")\nfor(i in 1:length(percs_calls$id)){\nnames(dl_percs) &lt;- str_replace(names(dl_percs),\npercs_calls$api[i],\npercs_calls$id[i])\n}\n</code></pre>"},{"location":"#five_d","title":"5d. Format downloads","text":"<p>Subset <code>dl_counts</code> and <code>dl_percs</code> for DVRPC's nine-county region. Percentages should range from 0 to 100. </p> <pre><code>dl_counts &lt;- dl_counts %&gt;%\nfilter(str_sub(GEOID20, 1, 5) %in% ipd_counties)\ndl_percs &lt;- dl_percs %&gt;%\nfilter(str_sub(GEOID20, 1, 5) %in% ipd_counties)\n</code></pre>"},{"location":"#five_d_i","title":"5d.i. Exception","text":"<p>Note that variable <code>B02001_002 (\"Estimate; Total: - White alone\")</code> was downloaded as the count for racial minority. Compute <code>B02001_001 (Universe)</code> - <code>B02001_002 (\"Estimate; Total: - White alone\")</code> and substitute for <code>RM_CE</code>. </p> <pre><code>dl_counts &lt;- dl_counts %&gt;% mutate(x = RM_UE - RM_CE) %&gt;%\nselect(-RM_CE) %&gt;%\nrename(RM_CE = x)\n</code></pre>"},{"location":"#five_d_ii","title":"5d.ii. Exception","text":"<p>Half-standard deviations serve as the classification bins for IPD scores, and including zero-population tracts affects computed standard deviation values. Start by removing the 11 census tracts with zero population. </p> <pre><code>slicer &lt;- c(\"34005981802\",\"34005982200\",\"34021980000\",\"42017980000\",\n\"42045980300\",\"42045980000\",\"42045980200\",\"42091980100\",\n\"42091980000\",\"42091980200\",\"42091980300\",\"42101036901\",\n\"42101980001\",\"42101980002\",\"42101980003\",\"42101980300\",\n\"42101980701\",\"42101980702\",\"42101980800\",\"42101980100\",\n\"42101980200\", \"42101980400\",\"42101980500\",\"42101980600\",\n\"42101980901\",\"42101980902\",\"42101980903\",\"42101980904\",\n\"42101980905\",\"42101980906\", \"42101989100\",\"42101989200\",\n\"42101989300\")\ndl_counts &lt;- dl_counts %&gt;% filter(!(GEOID20 %in% slicer))\ndl_percs &lt;- dl_percs %&gt;% filter(!(GEOID20 %in% slicer))\n</code></pre> <p>Here are the first few lines of <code>dl_counts</code> and <code>dl_percs</code>. Notice the naming convention:</p> <ul> <li><code>UE</code> = universe estimate</li> <li><code>UM</code> = universe MOE</li> <li><code>CE</code> = count estimate</li> <li><code>CM</code> = count MOE</li> <li><code>PE</code> = percentage estimate</li> <li><code>PM</code> = percentage MOE</li> </ul> <p>We use these strings to select columns, so consistency is key. </p>"},{"location":"#acs_estimates_calculations","title":"6. ACS estimates calculations","text":"<p>For all nine indicators, this section computes:</p> <ul> <li>Percentages and percentage MOEs</li> <li>Percentile</li> <li>IPD score and classification</li> <li>Composite IPD score</li> </ul> <p>Split <code>dl_counts</code> into a list named <code>comp</code> for processing and arrange column names in alphabetical order. The name of the list, <code>comp</code>, is a nod to the \"component parts\" of <code>dl_counts</code>. The structure of <code>comp</code> is similar to a four-tab Excel spreadsheet: for example, <code>comp</code> is the name of the <code>.xlsx</code> file, <code>uni_est</code> is a tab for universe estimates, and <code>uni_est</code> has nine columns and 1,368 rows, where the column is the IPD indicator and the row is the census tract observation.</p> <p>The order of columns is important because processing is based on vector position. We want to make sure that the first column of every tab corresponds to the Disabled indicator, the second to Ethnic Minority, et cetera. </p> <pre><code>comp &lt;- list()\ncomp$uni_est &lt;- dl_counts %&gt;% select(ends_with(\"UE\")) %&gt;% select(sort(tidyselect::peek_vars()))\ncomp$uni_moe &lt;- dl_counts %&gt;% select(ends_with(\"UM\")) %&gt;% select(sort(tidyselect::peek_vars()))\ncomp$count_est &lt;- dl_counts %&gt;% select(ends_with(\"CE\")) %&gt;% select(sort(tidyselect::peek_vars()))\ncomp$count_moe &lt;- dl_counts %&gt;% select(ends_with(\"CM\")) %&gt;% select(sort(tidyselect::peek_vars()))\n</code></pre>"},{"location":"#six_a","title":"6a. Percentages and percentage MOEs","text":""},{"location":"#six_a_i","title":"6a.i. Calculation","text":"<p>MOEs of the percentage values are obtained using the <code>tidycensus</code> function <code>moe_prop</code>. This chunk mentions <code>r</code> and <code>c</code> several times: continuing the spreadsheet analogy, think of <code>r</code> as the row number and <code>c</code> as the column number for a given spreadsheet tab. </p> <pre><code>pct_matrix &lt;- NULL\npct_moe_matrix &lt;- NULL\nfor (c in 1:length(comp$uni_est)){\npct &lt;- unlist(comp$count_est[,c] / comp$uni_est[,c])\npct_matrix &lt;- cbind(pct_matrix, pct)\nmoe &lt;- NULL\nfor (r in 1:length(comp$uni_est$LI_UE)){\nmoe_indiv &lt;- as.numeric(moe_prop(comp$count_est[r,c],\ncomp$uni_est[r,c],\ncomp$count_moe[r,c],\ncomp$uni_moe[r,c]))\nmoe &lt;- append(moe, moe_indiv)\n}\npct_moe_matrix &lt;- cbind(pct_moe_matrix, moe)\n}\n</code></pre>"},{"location":"#six_a_ii","title":"6a.ii. Result","text":"<p><code>pct</code> and <code>pct_moe</code> stores the percentages and associated MOEs for the nine indicator variables. Results are rounded to the tenths place and range from 0 to 100. </p> <pre><code>pct &lt;- as_tibble(pct_matrix) %&gt;% mutate_all(~ . * 100) %&gt;% mutate_all(round_1)\nnames(pct) &lt;- str_replace(names(comp$uni_est), \"_UE\", \"_PctEst\")\npct_moe &lt;- as_tibble(pct_moe_matrix) %&gt;% mutate_all(~ . * 100) %&gt;% mutate_all(round_1)\nnames(pct_moe) &lt;- str_replace(names(comp$uni_est), \"_UE\", \"_PctMOE\")\n</code></pre>"},{"location":"#six_a_iii","title":"6a.iii. Exception","text":"<p>If the percentage MOE equals 0, then overwrite it to equal 0.1. This should be a rare occurence with survey data at the census tract level. </p> <pre><code>pct_moe &lt;- pct_moe %&gt;% replace(., . == 0, 0.1)\n</code></pre>"},{"location":"#six_a_iv","title":"6a.iv. Exception","text":"<p>Substitute percentages and associated MOEs when available. This applies to the older adults, female, limited English proficiency, and disabled variables. </p> <pre><code>pct &lt;- pct %&gt;% mutate(D_PctEst = dl_percs$D_PE,\nOA_PctEst = dl_percs$OA_PE,\nLEP_PctEst = dl_percs$LEP_PE,\nF_PctEst = dl_percs$F_PE)\npct_moe &lt;- pct_moe %&gt;% mutate(D_PctMOE = dl_percs$D_PM,\nOA_PctMOE = dl_percs$OA_PM,\nLEP_PctMOE = dl_percs$LEP_PM,\nF_PctMOE = dl_percs$F_PM)\n</code></pre>"},{"location":"#six_b","title":"6b. Percentile","text":""},{"location":"#six__b_i","title":"6b.i. Calculation","text":"<p>Add percentiles (an additional \"spreadsheet tab\") to <code>comp</code>, making sure to first sort column names alphabetically. Compute the empirical cumulative distribution function for each of the nine indicator variables. The ECDF can range from 0 to 1, where 1 indicates the largest observed percentage. </p> <pre><code>comp$pct_est &lt;- pct %&gt;% select(sort(tidyselect::peek_vars()))\npercentile_matrix &lt;- NULL\nfor (c in 1:length(comp$uni_est)){\np &lt;- unlist(comp$pct_est[,c])\nrank &lt;- ecdf(p)(p)\npercentile_matrix &lt;- cbind(percentile_matrix, rank)\n}\n</code></pre>"},{"location":"#six_b_ii","title":"6b.ii. Result","text":"<p><code>percentile</code> stores the percentile for the nine indicator variables. Results are rounded to the hundredths place. </p> <pre><code>percentile &lt;- as_tibble(percentile_matrix) %&gt;% mutate_all(round_2)\nnames(percentile) &lt;- str_replace(names(comp$uni_est), \"_UE\", \"_Pctile\")\n</code></pre>"},{"location":"#six_c","title":"6c. IPD score and classification","text":"<p>Each observation is assigned an IPD score for each indicator. The IPD score for an individual indicator can range from 0 to 4, which corresponds to the following classification and bin breaks:</p> IPD Score IPD Classification Standard Deviations 0 Well Below Average x \\(&lt; -1.5 \\cdot stdev\\) 1 Below Average \\(-1.5 \\cdot stdev \\leq\\) x \\(&lt;-0.5 \\cdot stdev\\) 2 Average \\(-0.5 \\cdot stdev \\leq\\) x \\(&lt;0.5 \\cdot stdev\\) 3 Above Average \\(0.5 \\cdot stdev \\leq\\) x \\(&lt;1.5 \\cdot stdev\\) 4 Well Above Average x \\(\\geq 1.5 \\cdot stdev\\) <p></p>"},{"location":"#six_c_i","title":"6c.i. Calculation","text":"<p>The function <code>st_dev_breaks</code> is called to compute the bin breaks for each indicator. These breaks determine the IPD score stored in <code>score</code>. Note that we divide rounded <code>PctEst</code> columns by unrounded half-standard deviation breaks to compute the <code>score</code>. <code>class</code> is a textual explanation of the IPD score. </p> <pre><code>score_matrix &lt;- NULL\nclass_matrix &lt;- NULL\nfor (c in 1:length(comp$uni_est)){\np &lt;- unlist(comp$pct_est[,c])\nbreaks &lt;- st_dev_breaks(p, 5, na.rm = TRUE)\nscore &lt;- case_when(p &lt; breaks[2] ~ 0,\np &gt;= breaks[2] &amp; p &lt; breaks[3] ~ 1,\np &gt;= breaks[3] &amp; p &lt; breaks[4] ~ 2,\np &gt;= breaks[4] &amp; p &lt; breaks[5] ~ 3,\np &gt;= breaks[5] ~ 4)\nclass &lt;- case_when(score == 0 ~ \"Well Below Average\",\nscore == 1 ~ \"Below Average\",\nscore == 2 ~ \"Average\",\nscore == 3 ~ \"Above Average\",\nscore == 4 ~ \"Well Above Average\")\nscore_matrix &lt;- cbind(score_matrix, score)\nclass_matrix &lt;- cbind(class_matrix, class)\n}\n</code></pre>"},{"location":"#six_c_ii","title":"6c.ii. Result","text":"<p><code>score</code> and <code>class</code> store the IPD scores and associated descriptions for the nine indicator variables. </p> <pre><code>score &lt;- as_tibble(score_matrix)\nnames(score) &lt;- str_replace(names(comp$uni_est), \"_UE\", \"_Score\")\nclass &lt;- as_tibble(class_matrix)\nnames(class) &lt;- str_replace(names(comp$uni_est), \"_UE\", \"_Class\")\n</code></pre>"},{"location":"#six_d","title":"6d. Composite IPD score","text":""},{"location":"#six_d_i","title":"6d.i. Calculation","text":"<p>Sum the IPD scores for the nine indicator variables to determine the composite IPD score. </p> <pre><code>score &lt;- score %&gt;% mutate(IPD_Score = rowSums(.))\n</code></pre>"},{"location":"#acs_estimates_cleaning","title":"7. ACS estimates cleaning","text":"<p>There is a specific output format for <code>ipd.csv</code>, including column names, column order, flags for missing data, and census tracts with insufficient data. This section ensures conformity with the output formatting.</p> <p>Merge the percentage estimates, percentage MOEs, percentile, score, and class data frames into a single data frame called <code>ipd</code>. </p> <pre><code>ipd &lt;- bind_cols(dl_counts, pct) %&gt;%\nbind_cols(., pct_moe) %&gt;%\nbind_cols(., percentile) %&gt;%\nbind_cols(., score) %&gt;%\nbind_cols(., class)\n</code></pre> <p>Rename columns. </p> <pre><code>names(ipd) &lt;- str_replace(names(ipd), \"_CE\", \"_CntEst\")\nnames(ipd) &lt;- str_replace(names(ipd), \"_CM\", \"_CntMOE\")\nipd &lt;- ipd %&gt;% mutate(STATEFP20 = str_sub(GEOID20, 1, 2),\nCOUNTYFP20 = str_sub(GEOID20, 3, 5),\nNAME20 = str_sub(GEOID20, 6, 11),\nU_TPopEst = F_UE,\nU_TPopMOE = F_UM,\nU_Pop6Est = LEP_UE,\nU_Pop6MOE = LEP_UM,\nU_PPovEst = LI_UE,\nU_PPovMOE = LI_UM,\nU_PNICEst = D_UE,\nU_PNICMOE = D_UM) %&gt;%\nselect(-ends_with(\"UE\"), -ends_with(\"UM\"))\n</code></pre> <p>Reorder columns, with <code>GEOID</code> and FIPS codes first, the following variables in alphabetical order, and the total IPD score and universes at the end. </p> <pre><code>ipd &lt;- ipd %&gt;% select(GEOID20, STATEFP20, COUNTYFP20, NAME20, sort(tidyselect::peek_vars())) %&gt;%\nselect(move_last(., c(\"IPD_Score\", \"U_TPopEst\", \"U_TPopMOE\",\n\"U_Pop6Est\", \"U_Pop6MOE\", \"U_PPovEst\",\n\"U_PPovMOE\", \"U_PNICEst\", \"U_PNICMOE\")))\n</code></pre> <p>At the beginning of processing, we removed the slicer census tracts from processing because their populations were equal to zero. Tack these back on to the dataset. </p> <pre><code>slicer &lt;- enframe(slicer, name = NULL, value = \"GEOID20\")\nipd &lt;- plyr::rbind.fill(ipd, slicer)\n</code></pre> <p>Replace <code>NA</code> values with <code>NoData</code> if character we'll wait to replace <code>NA</code> with <code>-99999</code> if numeric. </p> <pre><code>ipd &lt;- ipd %&gt;% mutate_if(is.character, ~(ifelse(is.na(.), \"NoData\", .))) %&gt;%\nmutate_if(is.numeric, ~(ifelse(is.na(.), 0, .)))\n</code></pre>"},{"location":"#summary_tables","title":"8. Summary Tables","text":"<p>This section generates a handful of other deliverables, including:</p> <p>a. Counts by indicator b. Breaks by indicator c. Summary by indicator d. County means by indicator</p> <p>Replace <code>-99999</code> with <code>0</code> for numeric columns to avoid distorting summary statistics. </p> <pre><code>ipd_summary &lt;- ipd\nipd_summary[ipd_summary == 0]\n</code></pre>"},{"location":"#eight_a","title":"8a. Counts by indicator","text":"<p>The number of census tracts that fall in each bin. Count census tracts by indicator and bin. Reorder factor levels so that \"Well Below Average\" appears before \"Below Average,\" and the like. </p> <pre><code>counts &lt;- ipd_summary %&gt;% select(ends_with(\"Class\"))\nexport_counts &lt;- apply(counts, 2, function(i) plyr::count(i))\nfor(i in 1:length(export_counts)){\nexport_counts[[i]]$var &lt;- names(export_counts)[i]\n}\nexport_counts &lt;- map_dfr(export_counts, `[`, c(\"var\", \"x\", \"freq\"))\ncounts &lt;- ipd_summary %&gt;% select(ends_with(\"Class\"))\nexport_counts &lt;- apply(counts, 2, function(i) plyr::count(i))\nfor(i in 1:length(export_counts)){\nexport_counts[[i]]$var &lt;- names(export_counts)[i]\n}\nexport_counts &lt;- map_dfr(export_counts, `[`, c(\"var\", \"x\", \"freq\"))\ncolnames(export_counts) &lt;- c(\"Variable\", \"Classification\", \"Count\")\nexport_counts$Classification &lt;- factor(export_counts$Classification,\nlevels = c(\"Well Below Average\",\n\"Below Average\",\n\"Average\",\n\"Above Average\",\n\"Well Above Average\",\n\"NoData\"))\nexport_counts &lt;- arrange(export_counts, Variable, Classification)\nexport_counts &lt;- export_counts %&gt;%\nspread(Classification, Count) %&gt;%\nmutate_all(~(replace_na(., 0))) %&gt;%\nmutate(TOTAL = rowSums(.[2:7], na.rm = TRUE))\n</code></pre>"},{"location":"#eight_b","title":"8b. Breaks by indicator","text":"<p>The bin breaks for each indicator. Apply the <code>st_dev_breaks</code> function to all percentage values and export results. </p> <pre><code>breaks &lt;- ipd_summary %&gt;% select(ends_with(\"PctEst\"))\nexport_breaks &lt;- round(mapply(st_dev_breaks, x = breaks, i = 5, na.rm = TRUE), digits = 3)\nexport_breaks &lt;- as_tibble(export_breaks) %&gt;%\nmutate(Class = c(\"Min\", \"1\", \"2\", \"3\", \"4\", \"Max\")) %&gt;%\nselect(Class, tidyselect::peek_vars())\n</code></pre>"},{"location":"#eight_c","title":"8c. Summary by indicator","text":"<p>Summary statistics of each indicator. Round results to two decimal places. </p> <pre><code>pcts &lt;- ipd_summary %&gt;% select(ends_with(\"PctEst\"))\nsummary_data &lt;- apply(pcts, MARGIN=2, description)\nexport_summary &lt;- as_tibble(summary_data) %&gt;%\nmutate_all(round_2) %&gt;%\nmutate(Statistic = c(\"Minimum\", \"Median\", \"Mean\", \"SD\", \"Half-SD\", \"Maximum\")) %&gt;%\nselect(Statistic, tidyselect::peek_vars())\n</code></pre>"},{"location":"#eight_d","title":"8d. County means by indicator","text":"<p>Population-weighted means by county and indicator. For the most accurate percentage values, aggregate all counts back to the county level and compute percentages. In the export file, counties are referred to by the five-digit character supplied by the user to <code>ipd_counties</code>. </p> <pre><code>export_means &lt;- dl_counts %&gt;% select(GEOID20, ends_with(\"UE\"), ends_with(\"CE\")) %&gt;%\nselect(GEOID20, sort(tidyselect::peek_vars())) %&gt;%\nmutate(County = str_sub(GEOID20, 1, 5)) %&gt;%\nselect(-GEOID20) %&gt;%\ngroup_by(County) %&gt;%\nsummarize(D_PctEst = sum(D_CE) / sum(D_UE),\nEM_PctEst = sum(EM_CE) / sum(EM_UE),\nF_PctEst = sum(F_CE) / sum(F_UE),\nFB_PctEst = sum(FB_CE) / sum(FB_UE),\nLEP_PctEst = sum(LEP_CE) / sum(LEP_UE),\nLI_PctEst = sum(LI_CE) / sum(LI_UE),\nOA_PctEst = sum(OA_CE) / sum(OA_UE),\nRM_PctEst = sum(RM_CE) / sum(RM_UE),\nY_PctEst = sum(Y_CE) / sum(Y_UE)) %&gt;%\nmutate_if(is.numeric, ~ . * 100) %&gt;%\nmutate_if(is.numeric, round_1)\n</code></pre>"},{"location":"#eight_e","title":"8e. Replacing NA with NoData if character and -99999 if numeric","text":"<p>Now we replace NA with NoData if character and -99999 if numeric so tract 42091206702 doesn't mess up breaks and means by indicator. <pre><code>ipd &lt;- ipd %&gt;% mutate_if(is.character, ~(ifelse(is.na(.), \"NoData\", .))) %&gt;%\nmutate_if(is.numeric, ~(ifelse(is.na(.), -99999, .)))\nipd_summary[ipd_summary == -99999] &lt;- NA\n</code></pre></p> <p>In addition we extract elements of the GEOID and convert some of the fields to a <code>character</code> data type.</p> <pre><code>ipd$STATEFP20 &lt;- str_sub(ipd$GEOID20,1,2) ipd$COUNTYFP20 &lt;- str_sub(ipd$GEOID20,3,5) ipd$NAME20 &lt;- str_sub(ipd$GEOID20,6,11) ipd$GEOID20 &lt;- as.character(ipd$GEOID20)\nipd$STATEFP20 &lt;- as.character(ipd$STATEFP20)\nipd$COUNTYFP20 &lt;- as.character(ipd$COUNTYFP20)\nipd$NAME20 &lt;- as.character(ipd$NAME20)\nipd$namelsad &lt;- paste(substr(ipd$GEOID20, 6, 9), substr(ipd$GEOID20, 10, 11), sep = \".\")\n</code></pre>"},{"location":"#export","title":"9. Export","text":""},{"location":"#nine_a","title":"9a. Append to TIGER/LINE file","text":"<p>Using the arguments supplied in <code>ipd_county</code>, download the relevant census tracts and append <code>ipd</code> to them. Uncommenting <code>cb = TRUE</code> will greatly speed processing time by downloading generalized tract boundary shapefiles instead of detailed ones. </p> <pre><code>options(tigris_use_cache = TRUE, tigris_class = \"sf\")\nst &lt;- str_sub(ipd_counties, 1, 2)\ncty &lt;- str_sub(ipd_counties, 3, 5)\ntrct &lt;- map2(st, cty, ~{tracts(state = .x,\ncounty = .y,\n#cb = TRUE,\nyear = ipd_year)}) %&gt;%\nrbind_tigris() %&gt;%\nst_transform(., 26918) %&gt;%\nselect(GEOID) %&gt;%\nleft_join(., ipd, by = c(\"GEOID\" = \"GEOID20\")) %&gt;%\nrename(GEOID20 = GEOID)\n</code></pre>"},{"location":"#nine_b","title":"9b. Export files","text":"<p>Results are saved in <code>outputs</code>. </p> <pre><code>st_write(trct, here(\"outputs\", \"ipd_2021.shp\"), delete_dsn = TRUE, quiet = TRUE)\nwrite_csv(ipd, here(\"outputs\", \"ipd_2021.csv\"))\nwrite_csv(export_counts, here(\"outputs\", \"counts_by_indicator_2021.csv\"))\nwrite_csv(export_breaks, here(\"outputs\", \"breaks_by_indicator_2021.csv\"))\nwrite_csv(export_summary, here(\"outputs\", \"summary_by_indicator_2021.csv\"))\nwrite_csv(export_means, here(\"outputs\", \"mean_by_county_2021.csv\"))\n</code></pre>"},{"location":"#metadata","title":"10. Metadata table with sources","text":"<p>This is a table of the final output with some additional data such as municipality name and area added but not included in the script. </p> Variable Concept acs table acs variable data source Source Type Universe Variable geoid20 11-digit tract GEOID n/a n/a ACS 5-year n/a n/a statefp20 2-digit state GEOID n/a n/a ACS 5-year n/a n/a countyfp20 3-digit county GEOID n/a n/a ACS 5-year n/a n/a name20 Tract and county name n/a n/a ACS 5-year n/a n/a d_class Disabled percentile class n/a n/a calculated calculated S1810_C01_001 d_cntest Disabled count estimate S1810_C02_001_E acs variable ACS 5-year acs variable S1810_C01_001 d_cntmoe Disabled count margin of error S1810_C02_001_M acs variable ACS 5-year acs variable S1810_C01_001 d_pctest Disabled percent estimate S1810_C03_001_E acs variable ACS 5-year acs variable S1810_C01_001 d_pctile Disabled percentile n/a n/a calculated calculated S1810_C01_001 d_pctmoe Disabled percent margin of error S1810_C03_001_M acs variable ACS 5-year acs variable S1810_C01_001 d_score Disabled percentile score n/a n/a calculated calculated S1810_C01_001 em_class Ethnic minority percentile class B03002 n/a calculated calculated B03002_001 em_cntest Ethnic minority count estimate B03002 B03002_012_E ACS 5-year acs variable B03002_001 em_cntmoe Ethnic minority count margin of error B03002 B03002_012_M ACS 5-year acs variable B03002_001 em_pctest Ethnic minority percent estimate B03002 n/a calculated calculated B03002_001 em_pctile Ethnic minority percentile B03002 n/a calculated calculated B03002_001 em_pctmoe Ethnic minority percent margin of error B03002 n/a calculated calculated B03002_001 em_score Ethnic minority percentile score B03002 n/a calculated calculated B03002_001 f_class Female percentile class S0101 n/a calculated calculated S0101_C01_001 f_cntest Female count estimate S0101 S0101_C05_001_E ACS 5-year acs variable S0101_C01_001 f_cntmoe Female count margin of error S0101 S0101_C05_001_M ACS 5-year acs variable S0101_C01_001 f_pctest Female percent estimate S0101 DP05_0003PE_E ACS 5-year acs variable S0101_C01_001 f_pctile Female percentile S0101 n/a calculated calculated S0101_C01_001 f_pctmoe Female percent margin of error S0101 DP05_0003PE_M ACS 5-year acs variable S0101_C01_001 f_score Female percentile score S0101 n/a calculated calculated S0101_C01_001 fb_class Foreign-born percentile class B05012 n/a calculated calculated B05012_001 fb_cntest Foreign-born count estimate B05012 B05012_003_E ACS 5-year acs variable B05012_001 fb_cntmoe Foreign-born count margin of error B05012 B05012_003_M ACS 5-year acs variable B05012_001 fb_pctest Foreign-born percent estimate B05012 n/a calculated calculated B05012_001 fb_pctile Foreign-born percentile B05012 n/a calculated calculated B05012_001 fb_pctmoe Foreign-born percent margin of error B05012 n/a calculated calculated B05012_001 fb_score Foreign-born percentile score B05012 n/a calculated calculated S1601_C01_001 lep_class Limited English proficiency percentile class S1601 n/a calculated calculated S1601_C01_001 lep_cntest Limited English proficiency count estimate S1601 S1601_C05_001_E ACS 5-year acs variable S1601_C01_001 lep_cntmoe Limited English proficiency count margin of error S1601 S1601_C05_001_M ACS 5-year acs variable S1601_C01_001 lep_pctest Limited English proficiency percent estimate S1601 S1601_C06_001_E ACS 5-year acs variable S1601_C01_001 lep_pctile Limited English proficiency percentile S1601 n/a calculated calculated S1601_C01_001 lep_pctmoe Limited English proficiency percent margin of error S1601 S1601_C06_001_M ACS 5-year acs variable S1601_C01_001 lep_score Limited English proficiency percentile score S1601 n/a calculated calculated S1601_C01_001 li_class Low-income percentile class n/a n/a calculated calculated S1701_C01_001 li_cntest Low-income count estimate S1701 S1701_C01_042_E ACS 5-year acs variable S1701_C01_001 li_cntmoe Low-income count margin of error S1701 S1701_C01_042_M ACS 5-year acs variable S1701_C01_001 li_pctest Low-income percent estimate n/a n/a calculated calculated S1701_C01_001 li_pctile Low-income percentile n/a n/a calculated calculated S1701_C01_001 li_pctmoe Low-income percent margin of error n/a n/a calculated calculated S1701_C01_001 li_score Low-income percentile score n/a n/a calculated calculated S1701_C01_001 oa_class Older adult percentile class S0101 n/a calculated calculated B02001_001 oa_cntest Older adult count estimate S0101 S0101_C01_001_E ACS 5-year acs variable B02001_001 oa_cntmoe Older adult count margin of error S0101 S0101_C01_001_M ACS 5-year acs variable B02001_001 oa_pctest Older adult percent estimate S0101 S0101_C02_030_E ACS 5-year acs variable B02001_001 oa_pctile Older adult percentile S0101 n/a calculated calculated B02001_001 oa_pctmoe Older adult percent margin of error S0101 S0101_C02_030_M ACS 5-year acs variable B02001_001 oa_score Older adult percentile score S0101 n/a calculated calculated B02001_001 rm_class Racial minority percentile class B02001 n/a calculated calculated B02001_001 rm_cntest Racial minority count estimate B02001 B02001_002_E ACS 5-year acs variable B02001_001 rm_cntmoe Racial minority count margin of error B02001 B02001_002_M ACS 5-year acs variable B02001_001 rm_pctest Racial minority percent estimate B02001 n/a calculated calculated B02001_001 rm_pctile Racial minority percentile B02001 n/a calculated calculated B02001_001 rm_pctmoe Racial minority percent margin of error B02001 n/a calculated calculated B02001_001 rm_score Racial minority percentile score B02001 n/a calculated calculated B02001_001 y_class Youth percentile class B09001 n/a calculated calculated B03002_001 y_cntest Youth count estimate B09001 B09001_001 ACS 5-year acs variable B03002_001 y_cntmoe Youth count margin of error B09001 B09001_001 ACS 5-year acs variable B03002_001 y_pctest Youth population percentage estimate B09001 n/a calculated calculated B03002_001 y_pctile Youth population percentile B09001 n/a calculated calculated B03002_001 y_pctmoe Youth population percentage margin of error B09001 n/a calculated calculated B03002_001 y_score Youth percentile score B09001 n/a calculated calculated B03002_001 ipd_score Indicator of potential disadvantage score n/a n/a calculated calculated n/a u_tpopest Total population estimate B02001 B02001_001_E ACS 5-year acs variable B02001_001 u_tpopmoe Total population margin of error B02001 B02001_001_E ACS 5-year acs variable B02001_001 u_pop6est Population over 6 years of age estimate S1601 S1601_C01_001_E ACS 5-year acs variable S1601_C01_001 u_pop6moe Population over 6 years of age margin of error S1601 S1601_C01_001_M ACS 5-year acs variable S1601_C01_001 u_ppovest Total population poverty rate estimate S1701 S1701_C01_001_E ACS 5-year acs variable S1701_C01_001 u_ppovmoe Total population poverty rate margin of error S1701 S1701_C01_001_M ACS 5-year acs variable S1701_C01_001 u_pnicest Disabled universe total estimate S1810 S1810_C01_001_E ACS 5-year acs variable S1810_C01_001 u_pnicmoe Disabled universe total margin of error S1810 S1810_C01_001_M ACS 5-year acs variable S1810_C01_001 namelsad Geography name n/a n/a ACS 5-year acs variable n/a mun1 First municipality name n/a n/a calculated calculated n/a mun2 Second municipality name n/a n/a calculated calculated n/a mun3 Third municipality name n/a n/a calculated calculated n/a co_name County Name n/a n/a calculated calculated n/a state State name n/a n/a ACS 5-year n/a n/a st_area(shape) Area of a geometry n/a n/a ACS 5-year n/a n/a st_perimeter(shape) Perimeter of the geometry n/a n/a ACS 5-year n/a n/a"}]}